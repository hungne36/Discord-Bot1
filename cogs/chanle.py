import discord
from discord.ext import commands
from utils.data_manager import read_json, write_json
from datetime import datetime, timedelta
import random
from main import menu_lock_time
from utils.pet_bonus import get_pet_bonus_multiplier  # ‚Üê Pet bonus

    # D·ªØ li·ªáu c∆∞·ª£c theo k√™nh
chanle_bets = {}

    # Giao di·ªán ch·ªçn c∆∞·ª£c ch·∫µn/l·∫ª
class ChanLeSelectView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=None)
            self.add_item(ChanLeButton("Ch·∫µn"))
            self.add_item(ChanLeButton("L·∫ª"))
            self.add_item(KetThucButton("chanle"))

class ChanLeButton(discord.ui.Button):
        def __init__(self, label):
            super().__init__(label=label, style=discord.ButtonStyle.primary, custom_id=f"chanle_{label}")

        async def callback(self, interaction: discord.Interaction):
            user_id = str(interaction.user.id)
            channel_id = str(interaction.channel.id)

            await interaction.response.send_modal(BetModal(self.label, user_id, channel_id))

    # Modal nh·∫≠p ti·ªÅn c∆∞·ª£c
class BetModal(discord.ui.Modal, title="Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c"):
        def __init__(self, choice, user_id, channel_id):
            super().__init__()
            self.choice = choice
            self.user_id = user_id
            self.channel_id = channel_id

            self.add_item(discord.ui.TextInput(label="Nh·∫≠p s·ªë ti·ªÅn", placeholder="VD: 1000000", custom_id="bet_amount"))

        async def on_submit(self, interaction: discord.Interaction):
            try:
                amount = int(self.children[0].value)
            except ValueError:
                await interaction.response.send_message("‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.", ephemeral=True)
                return

            if amount <= 0:
                await interaction.response.send_message("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)
                return

            # Tr·ª´ ti·ªÅn
            balances = read_json("data/sodu.json")
            user_balance = balances.get(self.user_id, 0)

            if user_balance < amount:
                await interaction.response.send_message("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn.", ephemeral=True)
                return

            balances[self.user_id] = user_balance - amount
            write_json("data/sodu.json", balances)

            # L∆∞u c∆∞·ª£c
            if self.channel_id not in chanle_bets:
                chanle_bets[self.channel_id] = []

            chanle_bets[self.channel_id].append({
                "user_id": self.user_id,
                "choice": self.choice,
                "amount": amount
            })

            await interaction.response.send_message(f"‚úÖ B·∫°n ƒë√£ c∆∞·ª£c **{self.choice}** v·ªõi **{amount:,} xu**.", ephemeral=True)

    # N√∫t k·∫øt th√∫c tr√≤ ch∆°i
class KetThucButton(discord.ui.Button):
        def __init__(self, game_type):
            super().__init__(label="üéØ K·∫øt th√∫c tr√≤ ch∆°i", style=discord.ButtonStyle.danger, custom_id=f"{game_type}_end")
            self.game_type = game_type

        async def callback(self, interaction: discord.Interaction):
            channel_id = str(interaction.channel.id)

            # L·∫•y danh s√°ch c∆∞·ª£c
            bets = chanle_bets.get(channel_id, [])
            if not bets:
                await interaction.response.send_message("‚ö†Ô∏è Kh√¥ng c√≥ ai ƒë·∫∑t c∆∞·ª£c.", ephemeral=True)
                return

            # Random k·∫øt qu·∫£
            result_number = random.randint(1, 100)
            result = "Ch·∫µn" if result_number % 2 == 0 else "L·∫ª"

            # Load s·ªë d∆∞
            balances = read_json("data/sodu.json")

            # X·ª≠ l√Ω tr·∫£ th∆∞·ªüng
            msg_lines = [f"üéØ K·∫øt qu·∫£: **{result_number} ({result})**"]
            for bet in bets:
                user_id = bet["user_id"]
                choice = bet["choice"]
                amount = bet["amount"]

                if choice == result:
                    pet_bonus = get_pet_bonus_multiplier(user_id)
                    reward = int(amount * (1 + pet_bonus)) * 2
                    balances[user_id] = balances.get(user_id, 0) + reward
                    msg_lines.append(f"<@{user_id}> ‚úÖ Th·∫Øng! +{reward:,} xu (x{1 + pet_bonus:.2f} pet)")
                else:
                    msg_lines.append(f"<@{user_id}> ‚ùå Thua c∆∞·ª£c.")

            # L∆∞u l·∫°i s·ªë d∆∞
            write_json("data/sodu.json", balances)

            # Xo√° l∆∞·ª£t c∆∞·ª£c
            chanle_bets[channel_id] = []

            # Kho√° menu 30s
            global menu_lock_time
            menu_lock_time = datetime.now() + timedelta(seconds=30)

            # ƒê√≥ng view
            await interaction.response.edit_message(content="\n".join(msg_lines), view=None)



    # Setup cog
async def setup(bot):
        pass  # Kh√¥ng c·∫ßn add_cog n·∫øu ch·ªâ g·ªçi view t·ª´ n∆°i kh√°c