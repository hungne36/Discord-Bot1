    # cogs/chanle.py
import discord
from discord.ext import commands
from discord import app_commands
from utils.data_manager import get_balance, update_balance, add_history, get_pet_buff
from utils.cooldown import can_play
import random
import asyncio

class ChanLeModal(discord.ui.Modal):
        def __init__(self, choice: str):
            super().__init__(title=f"C∆∞·ª£c {'Ch·∫µn' if choice=='chan' else 'L·∫ª'}")
            self.choice = choice
            self.add_item(discord.ui.TextInput(
                label="S·ªë xu c∆∞·ª£c", placeholder="Nh·∫≠p ‚â•1.000", max_length=18
            ))

        async def on_submit(self, interaction: discord.Interaction):
            # 1. Parse v√† validate s·ªë nh·∫≠p v√†o
            try:
                amt = int(self.children[0].value)
            except ValueError:
                return await interaction.response.send_message(
                    "‚ùå Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá!", ephemeral=True
                )

            # 2. Ki·ªÉm tra cooldown
            ok, wait = can_play(interaction.user.id)
            if not ok:
                return await interaction.response.send_message(
                    f"‚è≥ Vui l√≤ng ƒë·ª£i {int(wait)} gi√¢y n·ªØa!", ephemeral=True
                )

            # 3. Ki·ªÉm tra s·ªë d∆∞
            bal = get_balance(interaction.user.id)
            if amt < 1000 or amt > bal:
                return await interaction.response.send_message(
                    "‚ùå S·ªë xu c∆∞·ª£c kh√¥ng h·ª£p l·ªá!", ephemeral=True
                )

            # 4. G·ª≠i tin nh·∫Øn ch·ªù v√† ƒë·ª£i
            await interaction.response.send_message(
                "‚öñÔ∏è ƒêang ch·ªù k·∫øt qu·∫£...", ephemeral=True
            )
            await asyncio.sleep(2)

            # 5. Quay k·∫øt qu·∫£
            sec = random.randint(0, 59)
            total = (sec // 10) + (sec % 10)
            kq = "chan" if total % 2 == 0 else "le"
            win = (kq == self.choice)

            # 6. T√≠nh thaydoi
            if win:
                profit = round(amt * 0.8)
                buff   = get_pet_buff(interaction.user.id)
                bonus  = round(profit * buff / 100) if buff else 0
                delta  = amt + profit + bonus
            else:
                profit, bonus = 0, 0
                delta = -amt

            # 7. C·∫≠p nh·∫≠t s·ªë d∆∞ v√† l·ªãch s·ª≠
            newb = update_balance(interaction.user.id, delta)
            add_history(
                interaction.user.id,
                f"chanle_{'win' if win else 'lose'}",
                delta,
                newb
            )

            # 8. ƒê·ªãnh d·∫°ng v√† g·ª≠i k·∫øt qu·∫£
            txt = (
                f"üî¢ S·ªë {sec:02d} ‚Üí **{total}** ({'CH·∫¥N' if kq=='chan' else 'L·∫∫'})\n"
                + (f"üéâ Th·∫Øng! +{profit:,} + pet bonus {bonus:,}\n" if win else "üí∏ B·∫°n thua v√† m·∫•t stake\n")
                + f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: **{newb:,} xu**"
            )
            await interaction.followup.send(txt)

class ChanLe(commands.Cog):
        def __init__(self, bot):
            self.bot = bot
        # Kh√¥ng c·∫ßn l·ªánh slash ri√™ng n·ªØa, v√¨ ƒë√£ t√≠ch h·ª£p qua menu

async def setup(bot):
        await bot.add_cog(ChanLe(bot))