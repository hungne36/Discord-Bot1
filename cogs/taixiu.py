import discord
from discord.ext import commands
import random
import asyncio
from utils.data_manager import get_balance, update_balance, log_history, get_pet_bonus
from datetime import datetime, timedelta
from main import menu_lock_time

class TaiXiuView(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=None)
                self.add_item(TaiXiuButton("T√†i", 11, 17))
                self.add_item(TaiXiuButton("X·ªâu", 4, 10))
                for i in range(3, 19):
                    self.add_item(TaiXiuButton(f"{i}", i, i))
                self.add_item(KetThucTaiXiuButton())

        # N√∫t ƒë·∫∑t c∆∞·ª£c
class TaiXiuButton(discord.ui.Button):
            def __init__(self, label, min_sum, max_sum):
                super().__init__(label=label, style=discord.ButtonStyle.secondary, custom_id=f"taixiu_{label}")
                self.min_sum = min_sum
                self.max_sum = max_sum

            async def callback(self, interaction: discord.Interaction):
                await interaction.response.send_modal(TaiXiuModal(self.label, self.min_sum, self.max_sum))

        # Modal nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c
class TaiXiuModal(discord.ui.Modal, title="üí∞ Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c"):
            def __init__(self, choice, min_sum, max_sum):
                super().__init__()
                self.choice = choice
                self.min_sum = min_sum
                self.max_sum = max_sum

                self.tien_cuoc = discord.ui.TextInput(
                    label="Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c",
                    placeholder="V√≠ d·ª•: 1000000",
                    required=True,
                    style=discord.TextStyle.short
                )
                self.add_item(self.tien_cuoc)

            async def on_submit(self, interaction: discord.Interaction):
                user_id = str(interaction.user.id)
                try:
                    amount = int(self.tien_cuoc.value.replace(",", ""))
                    if amount <= 0:
                        raise ValueError
                except:
                    return await interaction.response.send_message("‚ö†Ô∏è S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.", ephemeral=True)

                balance = get_balance(user_id)
                if amount > balance:
                    return await interaction.response.send_message("‚ö†Ô∏è B·∫°n kh√¥ng ƒë·ªß xu.", ephemeral=True)

                # Ghi l·∫°i d·ªØ li·ªáu c∆∞·ª£c v√†o b·ªô nh·ªõ t·∫°m
                if not hasattr(interaction.client, "taixiu_data"):
                    interaction.client.taixiu_data = {}
                if user_id not in interaction.client.taixiu_data:
                    interaction.client.taixiu_data[user_id] = []
                interaction.client.taixiu_data[user_id].append({
                    "choice": self.choice,
                    "min_sum": self.min_sum,
                    "max_sum": self.max_sum,
                    "amount": amount
                })

                await interaction.response.send_message(
                    f"‚úÖ ƒê·∫∑t c∆∞·ª£c {self.choice} v·ªõi {amount:,} xu th√†nh c√¥ng.\nH√£y nh·∫•n **K·∫øt th√∫c tr√≤ ch∆°i** khi s·∫µn s√†ng.",
                    ephemeral=True
                )

        # N√∫t k·∫øt th√∫c tr√≤ ch∆°i
class KetThucTaiXiuButton(discord.ui.Button):
            def __init__(self):
                super().__init__(label="üéØ K·∫øt th√∫c tr√≤ ch∆°i", style=discord.ButtonStyle.danger, custom_id="taixiu_ketthuc")

            async def callback(self, interaction: discord.Interaction):
                client = interaction.client
                user_id = str(interaction.user.id)

                if not hasattr(client, "taixiu_data") or user_id not in client.taixiu_data:
                    return await interaction.response.send_message("‚ö†Ô∏è B·∫°n ch∆∞a ƒë·∫∑t c∆∞·ª£c.", ephemeral=True)

                bets = client.taixiu_data[user_id]
                dice = [random.randint(1, 6) for _ in range(3)]
                total = sum(dice)
                result_text = f"üé≤ K·∫øt qu·∫£: {dice} ‚Üí T·ªïng: **{total}**\n"

                win_total = 0
                lose_total = 0
                pet_bonus_total = 0

                for bet in bets:
                    amount = bet["amount"]
                    if bet["min_sum"] <= total <= bet["max_sum"]:
                        bonus = get_pet_bonus(user_id, amount)
                        win_total += amount + bonus
                        pet_bonus_total += bonus
                        result_text += f"‚úÖ Th·∫Øng c∆∞·ª£c {bet['choice']} (+{amount:,} xu, bonus {bonus:,})\n"
                    else:
                        lose_total += amount
                        result_text += f"‚ùå Thua c∆∞·ª£c {bet['choice']} (-{amount:,} xu)\n"

                net = win_total - lose_total
                update_balance(user_id, net)
                log_history(user_id, "T√†i X·ªâu", net)

                result_text += f"\nüìå T·ªïng l·ªùi/l·ªó: {'+' if net >= 0 else ''}{net:,} xu"
                if pet_bonus_total > 0:
                    result_text += f"\nüêæ Pet bonus c·ªông th√™m: {pet_bonus_total:,} xu"

                # Xo√° d·ªØ li·ªáu
                del client.taixiu_data[user_id]

                # Kho√° menu to√†n server 30 gi√¢y
                global menu_lock_time
                menu_lock_time = datetime.now() + timedelta(seconds=30)

                # V√¥ hi·ªáu ho√° n√∫t
                for child in self.view.children:
                    if isinstance(child, discord.ui.Button):
                        child.disabled = True
                await interaction.response.edit_message(content=result_text, view=self.view)

async def setup(bot):
    pass  # View-only cog, no commands to register