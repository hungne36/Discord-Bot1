import discord
import random
from discord.ext import commands
from discord import app_commands
from utils.data_manager import read_json, write_json
from datetime import datetime

# File d·ªØ li·ªáu
BALANCE_FILE = "data/sodu.json"
HISTORY_FILE = "data/lichsu.json"

# H√†m ghi l·ªãch s·ª≠
def add_history(user_id: int, username: str, action: str, amount: int, balance_after: int):
    hist = read_json(HISTORY_FILE)
    hist.append({
        "user_id": user_id,
        "username": username,
        "action": action,
        "amount": amount,
        "balance_after": balance_after,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })
    write_json(HISTORY_FILE, hist)

# H√†m tung 4 ƒë·ªìng xu
def tung_xoc_dia():
    result = [random.choice(["ƒê·ªè", "Tr·∫Øng"]) for _ in range(4)]
    return result

# Giao di·ªán ch·ªçn c·ª≠a
class CuocView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=60)
        self.selected = []

        options = [
            discord.SelectOption(label="4 ƒê·ªè", description="T·ª∑ l·ªá 1:12"),
            discord.SelectOption(label="4 Tr·∫Øng", description="T·ª∑ l·ªá 1:12"),
            discord.SelectOption(label="3 Tr·∫Øng 1 ƒê·ªè", description="T·ª∑ l·ªá 1:2.6"),
            discord.SelectOption(label="3 ƒê·ªè 1 Tr·∫Øng", description="T·ª∑ l·ªá 1:2.6"),
            discord.SelectOption(label="Ch·∫µn", description="2 ƒê·ªè 2 Tr·∫Øng (1:0.9)"),
            discord.SelectOption(label="L·∫ª", description="3-1 ho·∫∑c 1-3 (1:0.9)")
        ]

        self.select = discord.ui.Select(
            placeholder="Ch·ªçn √≠t nh·∫•t 1 c·ª≠a",
            min_values=1,
            max_values=len(options),
            options=options
        )
        self.select.callback = self.select_callback
        self.add_item(self.select)

        self.confirm = discord.ui.Button(label="Ch·ªçn xong", style=discord.ButtonStyle.green)
        self.confirm.callback = self.confirm_callback
        self.add_item(self.confirm)

    async def select_callback(self, interaction: discord.Interaction):
        self.selected = self.select.values

    async def confirm_callback(self, interaction: discord.Interaction):
        self.stop()

# Giao di·ªán nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c
class TienCuocModal(discord.ui.Modal, title="üí∞ Nh·∫≠p s·ªë xu mu·ªën c∆∞·ª£c"):
    def __init__(self, selected_choices, callback):
        super().__init__()
        self.selected_choices = selected_choices
        self.callback_function = callback

        self.tiencuoc = discord.ui.TextInput(
            label="Nh·∫≠p s·ªë xu c∆∞·ª£c cho m·ªói c·ª≠a",
            placeholder="V√≠ d·ª•: 10000",
            required=True
        )
        self.add_item(self.tiencuoc)

    async def on_submit(self, interaction: discord.Interaction):
        await self.callback_function(interaction, self.selected_choices, int(self.tiencuoc.value))

# L·ªánh slash ch√≠nh
class XocDia(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="xocdia", description="üé≤ Ch∆°i X√≥c ƒêƒ©a (ch·ªçn nhi·ªÅu c·ª≠a)")
    async def xocdia(self, interaction: discord.Interaction):
        sodu = read_json(BALANCE_FILE)
        user_id = str(interaction.user.id)

        if user_id not in sodu or sodu[user_id] <= 0:
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ ƒë·ªß xu ƒë·ªÉ ch∆°i.", ephemeral=True)
            return

        view = CuocView()
        await interaction.response.send_message("üîò Ch·ªçn c√°c c·ª≠a mu·ªën c∆∞·ª£c:", view=view, ephemeral=True)
        await view.wait()

        if not view.selected:
            await interaction.followup.send("‚ùå B·∫°n ch∆∞a ch·ªçn c·ª≠a n√†o!", ephemeral=True)
            return

        # Sau khi ch·ªçn xong c·ª≠a -> hi·ªán modal nh·∫≠p ti·ªÅn c∆∞·ª£c
        await interaction.followup.send_modal(
            TienCuocModal(view.selected, self.process_game)
        )

    # X·ª≠ l√Ω k·∫øt qu·∫£ sau khi nh·∫≠p ti·ªÅn
    async def process_game(self, interaction: discord.Interaction, choices, amount: int):
        user = interaction.user
        user_id = str(user.id)
        sodu = read_json(BALANCE_FILE)

        total_bet = amount * len(choices)
        if user_id not in sodu or sodu[user_id] < total_bet:
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!", ephemeral=True)
            return

        result = tung_xoc_dia()
        count_do = result.count("ƒê·ªè")
        count_trang = result.count("Tr·∫Øng")

        # X√°c ƒë·ªãnh k·∫øt qu·∫£ th·∫Øng
        ketqua = []
        if count_do == 4:
            ketqua.append("4 ƒê·ªè")
        elif count_trang == 4:
            ketqua.append("4 Tr·∫Øng")
        elif count_trang == 3:
            ketqua.append("3 Tr·∫Øng 1 ƒê·ªè")
        elif count_do == 3:
            ketqua.append("3 ƒê·ªè 1 Tr·∫Øng")

        if count_do % 2 == 0:
            ketqua.append("Ch·∫µn")
        else:
            ketqua.append("L·∫ª")

        # T√≠nh ti·ªÅn th∆∞·ªüng
        thuong = 0
        for choice in choices:
            if choice in ketqua:
                if choice in ["4 ƒê·ªè", "4 Tr·∫Øng"]:
                    thuong += amount * 12
                elif choice in ["3 Tr·∫Øng 1 ƒê·ªè", "3 ƒê·ªè 1 Tr·∫Øng"]:
                    thuong += amount * 2.6
                elif choice in ["Ch·∫µn", "L·∫ª"]:
                    thuong += amount * 0.9

        # Tr·ª´ ti·ªÅn, c·ªông th∆∞·ªüng
        sodu[user_id] -= total_bet
        sodu[user_id] += int(thuong)
        write_json(BALANCE_FILE, sodu)

        # Ghi l·ªãch s·ª≠
        add_history(user.id, user.name, "X√≥c ƒêƒ©a", total_bet, sodu[user_id])

        # G·ª≠i k·∫øt qu·∫£
        desc = f"üéØ K·∫øt qu·∫£: {' | '.join(result)} ({count_do} ƒê·ªè - {count_trang} Tr·∫Øng)\n"
        desc += f"üßæ B·∫°n ƒë√£ ch·ªçn: {', '.join(choices)}\n"
        desc += f"üí∏ T·ªïng c∆∞·ª£c: {total_bet:,} xu\n"
        desc += f"üèÜ Th·∫Øng: {int(thuong):,} xu\n"
        desc += f"üí∞ S·ªë d∆∞: {sodu[user_id]:,} xu"

        embed = discord.Embed(title="üé≤ K·∫øt qu·∫£ X√≥c ƒêƒ©a", description=desc, color=0x3498db)
        await interaction.response.send_message(embed=embed)

async def setup(bot):
    await bot.add_cog(XocDia(bot))