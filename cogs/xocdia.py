
import discord
import random
from discord.ext import commands
from discord import app_commands
from utils.data_manager import read_json, write_json
from datetime import datetime
import asyncio

# File d·ªØ li·ªáu
BALANCE_FILE = "data/sodu.json"
HISTORY_FILE = "data/lichsu.json"
SESSION_FILE = "data/xocdia_session.json"

# C√°c c·ª≠a c∆∞·ª£c
CACH_CUA = ["4 ƒê·ªè", "4 Tr·∫Øng", "3 ƒê·ªè 1 Tr·∫Øng", "3 Tr·∫Øng 1 ƒê·ªè", "Ch·∫µn", "L·∫ª"]

# H√†m ghi l·ªãch s·ª≠
def add_history(user_id: int, username: str, action: str, amount: int, balance_after: int):
    hist = read_json(HISTORY_FILE)
    hist.append({
        "user_id": user_id,
        "username": username,
        "action": action,
        "amount": amount,
        "balance_after": balance_after,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })
    write_json(HISTORY_FILE, hist)

# H√†m tung 4 ƒë·ªìng xu
def tung_xoc_dia():
    result = [random.choice(["ƒê·ªè", "Tr·∫Øng"]) for _ in range(4)]
    return result

class BetModal(discord.ui.Modal):
    def __init__(self, choice):
        super().__init__(title=f"C∆∞·ª£c {choice}")
        self.choice = choice
        self.amount = discord.ui.TextInput(
            label="S·ªë xu c∆∞·ª£c", 
            placeholder="Nh·∫≠p s·ªë xu", 
            required=True,
            max_length=18
        )
        self.add_item(self.amount)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            amount = int(self.amount.value)
        except ValueError:
            await interaction.response.send_message("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!", ephemeral=True)
            return

        if amount < 1000:
            await interaction.response.send_message("‚ùå S·ªë xu c∆∞·ª£c t·ªëi thi·ªÉu l√† 1,000!", ephemeral=True)
            return

        user_id = str(interaction.user.id)
        balances = read_json(BALANCE_FILE)
        
        if user_id not in balances or balances[user_id] < amount:
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!", ephemeral=True)
            return

        # Ki·ªÉm tra session c√≤n ho·∫°t ƒë·ªông kh√¥ng
        session_data = read_json(SESSION_FILE)
        if not session_data.get("active", False):
            await interaction.response.send_message("‚ùå Phi√™n c∆∞·ª£c ƒë√£ k·∫øt th√∫c!", ephemeral=True)
            return

        # Ki·ªÉm tra m√¢u thu·∫´n c∆∞·ª£c
        user_bets = session_data["bets"].get(user_id, {})
        
        # Ki·ªÉm tra m√¢u thu·∫´n 4 ƒê·ªè vs 4 Tr·∫Øng
        if self.choice == "4 ƒê·ªè" and "4 Tr·∫Øng" in user_bets:
            await interaction.response.send_message("‚ùå B·∫°n ƒë√£ c∆∞·ª£c 4 Tr·∫Øng, kh√¥ng th·ªÉ c∆∞·ª£c 4 ƒê·ªè!", ephemeral=True)
            return
        if self.choice == "4 Tr·∫Øng" and "4 ƒê·ªè" in user_bets:
            await interaction.response.send_message("‚ùå B·∫°n ƒë√£ c∆∞·ª£c 4 ƒê·ªè, kh√¥ng th·ªÉ c∆∞·ª£c 4 Tr·∫Øng!", ephemeral=True)
            return
        
        # Ki·ªÉm tra m√¢u thu·∫´n Ch·∫µn vs L·∫ª
        if self.choice == "Ch·∫µn" and "L·∫ª" in user_bets:
            await interaction.response.send_message("‚ùå B·∫°n ƒë√£ c∆∞·ª£c L·∫ª, kh√¥ng th·ªÉ c∆∞·ª£c Ch·∫µn!", ephemeral=True)
            return
        if self.choice == "L·∫ª" and "Ch·∫µn" in user_bets:
            await interaction.response.send_message("‚ùå B·∫°n ƒë√£ c∆∞·ª£c Ch·∫µn, kh√¥ng th·ªÉ c∆∞·ª£c L·∫ª!", ephemeral=True)
            return

        # Tr·ª´ xu
        balances[user_id] -= amount
        write_json(BALANCE_FILE, balances)

        # L∆∞u c∆∞·ª£c v√†o session
        if user_id not in session_data["bets"]:
            session_data["bets"][user_id] = {}
        
        session_data["bets"][user_id][self.choice] = session_data["bets"][user_id].get(self.choice, 0) + amount
        write_json(SESSION_FILE, session_data)

        await interaction.response.send_message(
            f"‚úÖ ƒê√£ c∆∞·ª£c **{amount:,} xu** v√†o **{self.choice}**!\nüí∞ S·ªë d∆∞ c√≤n l·∫°i: **{balances[user_id]:,} xu**", 
            ephemeral=True
        )

class CuaButton(discord.ui.Button):
    def __init__(self, label):
        super().__init__(label=label, style=discord.ButtonStyle.primary)

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_modal(BetModal(self.label))

class XocDiaView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=30)
        self.msg = None
        for label in CACH_CUA:
            self.add_item(CuaButton(label))

    async def on_timeout(self):
        if self.msg:
            await ket_thuc_phien(self.msg.channel)

async def ket_thuc_phien(channel):
    session_data = read_json(SESSION_FILE)
    if not session_data.get("active", False):
        return

    # ƒê√°nh d·∫•u session k·∫øt th√∫c
    session_data["active"] = False
    write_json(SESSION_FILE, session_data)

    if not session_data.get("bets"):
        await channel.send("üé≤ Phi√™n X√≥c ƒêƒ©a k·∫øt th√∫c! Kh√¥ng c√≥ ai c∆∞·ª£c.")
        return

    # Random k·∫øt qu·∫£
    result = tung_xoc_dia()
    count_do = result.count("ƒê·ªè")
    count_trang = result.count("Tr·∫Øng")

    # X√°c ƒë·ªãnh c·ª≠a th·∫Øng
    cua_thang = []
    if count_do == 4:
        cua_thang.append("4 ƒê·ªè")
    elif count_trang == 4:
        cua_thang.append("4 Tr·∫Øng")
    elif count_do == 3:
        cua_thang.append("3 ƒê·ªè 1 Tr·∫Øng")
    elif count_trang == 3:
        cua_thang.append("3 Tr·∫Øng 1 ƒê·ªè")

    if count_do % 2 == 0:
        cua_thang.append("Ch·∫µn")
    else:
        cua_thang.append("L·∫ª")

    # T√≠nh th∆∞·ªüng cho t·ª´ng ng∆∞·ªùi
    balances = read_json(BALANCE_FILE)
    emoji_map = {"ƒê·ªè": "üî¥", "Tr·∫Øng": "‚ö™"}
    ketqua_emoji = ' '.join(emoji_map[i] for i in result)

    embed = discord.Embed(
        title="üé≤ K·∫øt qu·∫£ X√≥c ƒêƒ©a", 
        description=f"üéØ K·∫øt qu·∫£: {ketqua_emoji} ({count_do} ƒê·ªè ‚Äì {count_trang} Tr·∫Øng)",
        color=0x3498db
    )

    thuong_info = []
    
    for user_id, user_bets in session_data["bets"].items():
        user = channel.guild.get_member(int(user_id))
        username = user.display_name if user else f"User {user_id}"
        
        tong_cuoc = sum(user_bets.values())
        tong_thuong = 0

        for cua, so_cuoc in user_bets.items():
            if cua in cua_thang:
                if cua in ["4 ƒê·ªè", "4 Tr·∫Øng"]:
                    tong_thuong += so_cuoc * 12
                elif cua in ["3 ƒê·ªè 1 Tr·∫Øng", "3 Tr·∫Øng 1 ƒê·ªè"]:
                    tong_thuong += so_cuoc * 2.6
                elif cua in ["Ch·∫µn", "L·∫ª"]:
                    tong_thuong += so_cuoc * 0.9

        # C·ªông th∆∞·ªüng v√†o s·ªë d∆∞
        balances[user_id] = balances.get(user_id, 0) + int(tong_thuong)
        
        # Ghi l·ªãch s·ª≠
        add_history(int(user_id), username, "X√≥c ƒêƒ©a", tong_cuoc, balances[user_id])
        
        # Th√¥ng tin ng∆∞·ªùi ch∆°i
        lai_lo = int(tong_thuong) - tong_cuoc
        status = "üèÜ" if lai_lo > 0 else "üí∏" if lai_lo < 0 else "ü§ù"
        
        thuong_info.append(f"{status} **{username}**: {lai_lo:+,} xu")

    write_json(BALANCE_FILE, balances)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    if thuong_info:
        embed.add_field(name="üìä K·∫øt qu·∫£ ng∆∞·ªùi ch∆°i", value="\n".join(thuong_info), inline=False)
    else:
        embed.add_field(name="üìä K·∫øt qu·∫£", value="Kh√¥ng c√≥ ai th·∫Øng", inline=False)

    await channel.send(embed=embed)

    # Reset session
    write_json(SESSION_FILE, {"active": False, "bets": {}})

class XocDia(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="xocdia", description="B·∫Øt ƒë·∫ßu phi√™n ch∆°i X√≥c ƒêƒ©a (ch∆°i chung)")
    async def xocdia(self, interaction: discord.Interaction):
        # Ki·ªÉm tra phi√™n hi·ªán t·∫°i
        session_data = read_json(SESSION_FILE)
        if session_data.get("active", False):
            await interaction.response.send_message("‚ùå ƒê√£ c√≥ phi√™n X√≥c ƒêƒ©a ƒëang di·ªÖn ra!", ephemeral=True)
            return

        # T·∫°o phi√™n m·ªõi
        data = {"active": True, "bets": {}}
        write_json(SESSION_FILE, data)
        
        view = XocDiaView()
        await interaction.response.send_message(
            "üéÆ Phi√™n X√≥c ƒêƒ©a b·∫Øt ƒë·∫ßu! Ch·ªçn c·ª≠a b√™n d∆∞·ªõi ƒë·ªÉ c∆∞·ª£c:",
            view=view
        )
        message = await interaction.original_response()
        view.msg = message  # view.msg s·∫Ω d√πng l·∫°i ƒë·ªÉ k·∫øt th√∫c phi√™n

async def setup(bot):
    await bot.add_cog(XocDia(bot))
